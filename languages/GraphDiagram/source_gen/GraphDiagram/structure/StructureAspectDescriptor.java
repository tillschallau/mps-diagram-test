package GraphDiagram.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptEdge = createDescriptorForEdge();
  /*package*/ final ConceptDescriptor myConceptGraph = createDescriptorForGraph();
  /*package*/ final ConceptDescriptor myConceptNode = createDescriptorForNode();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptEdge, myConceptGraph, myConceptNode);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.Edge:
        return myConceptEdge;
      case LanguageConceptSwitch.Graph:
        return myConceptGraph;
      case LanguageConceptSwitch.Node:
        return myConceptNode;
      default:
        return null;
    }
  }


  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForEdge() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("GraphDiagram", "Edge", 0xc0b03141f824430bL, 0xa88b4b8885d7ba65L, 0x51ac32e3792d17eeL);
    b.class_(false, false, false);
    b.origin("r:5a21089c-f805-4bd2-8ac6-84d1b157d826(GraphDiagram.structure)/5885134765638359022");
    b.version(2);
    b.associate("from", 0x51ac32e3792d17f4L).target(0xc0b03141f824430bL, 0xa88b4b8885d7ba65L, 0x51ac32e3792d17ebL).optional(true).origin("5885134765638359028").done();
    b.associate("to", 0x51ac32e3792d17f6L).target(0xc0b03141f824430bL, 0xa88b4b8885d7ba65L, 0x51ac32e3792d17ebL).optional(true).origin("5885134765638359030").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGraph() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("GraphDiagram", "Graph", 0xc0b03141f824430bL, 0xa88b4b8885d7ba65L, 0x51ac32e3792d17eaL);
    b.class_(false, false, true);
    b.origin("r:5a21089c-f805-4bd2-8ac6-84d1b157d826(GraphDiagram.structure)/5885134765638359018");
    b.version(2);
    b.aggregate("nodes", 0x51ac32e3792d17efL).target(0xc0b03141f824430bL, 0xa88b4b8885d7ba65L, 0x51ac32e3792d17ebL).optional(true).ordered(true).multiple(true).origin("5885134765638359023").done();
    b.aggregate("edges", 0x51ac32e3792d17f1L).target(0xc0b03141f824430bL, 0xa88b4b8885d7ba65L, 0x51ac32e3792d17eeL).optional(true).ordered(true).multiple(true).origin("5885134765638359025").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNode() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("GraphDiagram", "Node", 0xc0b03141f824430bL, 0xa88b4b8885d7ba65L, 0x51ac32e3792d17ebL);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:5a21089c-f805-4bd2-8ac6-84d1b157d826(GraphDiagram.structure)/5885134765638359019");
    b.version(2);
    return b.create();
  }
}
