package GraphDiagram.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Indent;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import de.itemis.mps.editor.diagram.runtime.jgraph.BaseDiagramECell;
import de.itemis.mps.editor.diagram.runtime.EditorUtil;
import de.itemis.mps.editor.diagram.runtime.jgraph.DiagramCreationContext;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import de.itemis.mps.editor.diagram.runtime.DiagramContext;
import de.itemis.mps.editor.diagram.runtime.ContextVariables;
import de.itemis.mps.editor.diagram.runtime.model.IDiagramAccessor;
import de.itemis.mps.editor.diagram.runtime.model.AbstractDiagramAccessor;
import java.util.List;
import de.itemis.mps.editor.diagram.runtime.model.IDiagramElementAccessor;
import de.itemis.mps.editor.diagram.runtime.model.IAccessorFactory;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import de.itemis.mps.editor.diagram.runtime.model.IConnectionType;
import java.util.Collections;
import de.itemis.mps.editor.diagram.runtime.model.GeneratedConnectionType;
import de.itemis.mps.editor.diagram.runtime.model.IConnectionEndpoint;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import de.itemis.mps.editor.diagram.runtime.model.DiagramModel;
import de.itemis.mps.editor.diagram.runtime.model.IPaletteEntryProvider;
import de.itemis.mps.editor.diagram.runtime.model.CompositePaletteEntryProvider;
import de.itemis.mps.editor.diagram.runtime.model.SubstituteInfoPaletteEntryProvider;
import de.itemis.mps.editor.diagram.runtime.substitute.SubstituteInfoFactory;
import de.itemis.mps.editor.diagram.runtime.jgraph.SubDiagramECell;
import de.itemis.mps.editor.diagram.runtime.jgraph.RootDiagramECell;
import de.itemis.mps.editor.diagram.runtime.jgraph.RootDCell;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SConcept;

/*package*/ class Graph_graphical_EditorBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public Graph_graphical_EditorBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createCollection_0();
  }

  private EditorCell createCollection_0() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Indent());
    editorCell.setCellId("Collection_xc5nkl_a");
    editorCell.setBig(true);
    setCellContext(editorCell);
    editorCell.addEditorCell(createDiagram_1());
    return editorCell;
  }
  private EditorCell createDiagram_0(final EditorContext editorContext, final SNode node) {
    final Wrappers._T<BaseDiagramECell> editorCell = new Wrappers._T<BaseDiagramECell>(null);

    EditorUtil.noCaching(editorContext, new Runnable() {
      public void run() {
        DiagramCreationContext.createDiagram(new _FunctionTypes._void_P0_E0() {
          public void invoke() {
            DiagramContext.withContext(node, new _FunctionTypes._return_P0_E0<BaseDiagramECell>() {
              public BaseDiagramECell invoke() {
                return editorCell.value;
              }
            }, new Runnable() {
              public void run() {
                ContextVariables.withValue("thisNode", node, new Runnable() {
                  public void run() {
                    final ContextVariables _variablesContext = ContextVariables.getCurrent();
                    IDiagramAccessor accessor = new AbstractDiagramAccessor(node) {
                      public List<? extends IDiagramElementAccessor> getElements(IAccessorFactory accessorFactory) {
                        final List<IDiagramElementAccessor> elements = new ArrayList<IDiagramElementAccessor>();
                        for (SNode e : ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.nodes$kt37))) {
                          elements.addAll(accessorFactory.fromSNode(e));
                        }
                        for (SNode e : Sequence.fromIterable(new Object() {
                          public Iterable<SNode> query() {
                            return SLinkOperations.getChildren(((SNode) _variablesContext.getValue("thisNode")), LINKS.edges$ktx9);
                          }
                        }.query())) {
                          elements.addAll(accessorFactory.fromSNode(e, false));
                        }
                        return elements;
                      }
                      @Override
                      public List<IConnectionType> getConnectionTypes() {
                        List<IConnectionType> connectionTypes = new ArrayList<IConnectionType>();
                        connectionTypes.addAll(Collections.singletonList(new GeneratedConnectionType() {
                          public String getName() {
                            return "Create Connection";
                          }
                          @Override
                          public void create(final IConnectionEndpoint from, final IConnectionEndpoint to) {
                            final SNode fromNode = SNodeOperations.cast(from.getSNode(), CONCEPTS.Node$yR);
                            final SNode toNode = SNodeOperations.cast(to.getSNode(), CONCEPTS.Node$yR);
                            final String fromPort = from.getPortName();
                            final String toPort = to.getPortName();

                            {
                              SNode edge = SNodeFactoryOperations.createNewNode(CONCEPTS.Edge$Iv, null);
                              SLinkOperations.setTarget(edge, LINKS.from$kuqj, fromNode);
                              SLinkOperations.setTarget(edge, LINKS.to$kzNE, toNode);
                              ListSequence.fromList(SLinkOperations.getChildren(((SNode) _variablesContext.getValue("thisNode")), LINKS.edges$ktx9)).addElement(edge);
                            }
                          }
                          @Override
                          public boolean isValidStart(IConnectionEndpoint from) {
                            final SNode fromNode = SNodeOperations.as(from.getSNode(), CONCEPTS.Node$yR);
                            if (fromNode == null) {
                              return false;
                            }
                            final String fromPort = from.getPortName();
                            return true;
                          }
                          @Override
                          public boolean isValidEnd(IConnectionEndpoint to) {
                            final SNode toNode = SNodeOperations.as(to.getSNode(), CONCEPTS.Node$yR);
                            if (toNode == null) {
                              return false;
                            }
                            final String toPort = to.getPortName();
                            return true;
                          }
                        }));
                        return connectionTypes;
                      }

                    };

                    DiagramModel model = DiagramModel.getModel(editorContext, node, "5885134765638407867", accessor);

                    IPaletteEntryProvider paletteEntryProvider = new CompositePaletteEntryProvider(new SubstituteInfoPaletteEntryProvider(new SubstituteInfoFactory(editorContext, node).forChildLink(node, SLinkOperations.findLinkDeclaration(LINKS.nodes$kt37))));
                    model.setPaletteEntryProvider(paletteEntryProvider);

                    if (DiagramCreationContext.isSubdiagram()) {
                      editorCell.value = new SubDiagramECell(editorContext, node, model);
                    } else {
                      editorCell.value = new RootDiagramECell(editorContext, node, model);
                    }
                    editorCell.value.setCellId("Diagram_xc5nkl_a0");
                    if (editorCell.value.getContextGraph() != null) {
                      Object defaultParent = editorCell.value.getContextGraph().getDefaultParent();
                      if (defaultParent instanceof RootDCell) {
                        ((RootDCell) defaultParent).resetButtonConfig();
                      }
                    }
                  }
                });
              }
            });
          }
        });
      }
    });

    return editorCell.value;
  }
  private EditorCell createDiagram_1() {
    return createDiagram_0(getEditorContext(), myNode);
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink nodes$kt37 = MetaAdapterFactory.getContainmentLink(0xc0b03141f824430bL, 0xa88b4b8885d7ba65L, 0x51ac32e3792d17eaL, 0x51ac32e3792d17efL, "nodes");
    /*package*/ static final SContainmentLink edges$ktx9 = MetaAdapterFactory.getContainmentLink(0xc0b03141f824430bL, 0xa88b4b8885d7ba65L, 0x51ac32e3792d17eaL, 0x51ac32e3792d17f1L, "edges");
    /*package*/ static final SReferenceLink from$kuqj = MetaAdapterFactory.getReferenceLink(0xc0b03141f824430bL, 0xa88b4b8885d7ba65L, 0x51ac32e3792d17eeL, 0x51ac32e3792d17f4L, "from");
    /*package*/ static final SReferenceLink to$kzNE = MetaAdapterFactory.getReferenceLink(0xc0b03141f824430bL, 0xa88b4b8885d7ba65L, 0x51ac32e3792d17eeL, 0x51ac32e3792d17f6L, "to");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Node$yR = MetaAdapterFactory.getConcept(0xc0b03141f824430bL, 0xa88b4b8885d7ba65L, 0x51ac32e3792d17ebL, "GraphDiagram.structure.Node");
    /*package*/ static final SConcept Edge$Iv = MetaAdapterFactory.getConcept(0xc0b03141f824430bL, 0xa88b4b8885d7ba65L, 0x51ac32e3792d17eeL, "GraphDiagram.structure.Edge");
  }
}
